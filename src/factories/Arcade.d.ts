/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ArcadeInterface extends ethers.utils.Interface {
	functions: {
		"approve(address,uint256)": FunctionFragment;
		"background(uint256)": FunctionFragment;
		"backgroundURI(uint256)": FunctionFragment;
		"balanceOf(address)": FunctionFragment;
		"baseURI()": FunctionFragment;
		"blockAttribute(uint256)": FunctionFragment;
		"blockAttributeURI(uint256)": FunctionFragment;
		"combatSuit(uint256)": FunctionFragment;
		"combatSuitURI(uint256)": FunctionFragment;
		"componentsBaseURI()": FunctionFragment;
		"customeURI(uint256)": FunctionFragment;
		"facialAccessories(uint256)": FunctionFragment;
		"facialAccessoriesURI(uint256)": FunctionFragment;
		"generateMetaId(uint256)": FunctionFragment;
		"getApproved(uint256)": FunctionFragment;
		"glass(uint256)": FunctionFragment;
		"glassURI(uint256)": FunctionFragment;
		"hasPreset()": FunctionFragment;
		"isApprovedForAll(address,address)": FunctionFragment;
		"isSaleOpen()": FunctionFragment;
		"level(uint256)": FunctionFragment;
		"levelURI(uint256)": FunctionFragment;
		"maxMintx()": FunctionFragment;
		"metaIdExsits(uint256)": FunctionFragment;
		"metaIds(uint256)": FunctionFragment;
		"mint()": FunctionFragment;
		"name()": FunctionFragment;
		"owner()": FunctionFragment;
		"ownerOf(uint256)": FunctionFragment;
		"preset(address,uint256[])": FunctionFragment;
		"presets()": FunctionFragment;
		"renounceOwnership()": FunctionFragment;
		"safeTransferFrom(address,address,uint256)": FunctionFragment;
		"saleStart()": FunctionFragment;
		"setApprovalForAll(address,bool)": FunctionFragment;
		"setBaseURI(string)": FunctionFragment;
		"setComponentsBaseURI(string)": FunctionFragment;
		"shape(uint256)": FunctionFragment;
		"shapeURI(uint256)": FunctionFragment;
		"supportsInterface(bytes4)": FunctionFragment;
		"symbol()": FunctionFragment;
		"tokenByIndex(uint256)": FunctionFragment;
		"tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
		"tokenPrice()": FunctionFragment;
		"tokenReceiver()": FunctionFragment;
		"tokenURI(uint256)": FunctionFragment;
		"totalSupply()": FunctionFragment;
		"transferFrom(address,address,uint256)": FunctionFragment;
		"transferOwnership(address)": FunctionFragment;
		"transferTokenReceiver(address)": FunctionFragment;
	};

	encodeFunctionData(
		functionFragment: "approve",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "background",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "backgroundURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
	encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "blockAttribute",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "blockAttributeURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "combatSuit",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "combatSuitURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "componentsBaseURI",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "customeURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "facialAccessories",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "facialAccessoriesURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "generateMetaId",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "getApproved",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "glass", values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "glassURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "hasPreset", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "isApprovedForAll",
		values: [string, string]
	): string;
	encodeFunctionData(
		functionFragment: "isSaleOpen",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "level", values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "levelURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "maxMintx", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "metaIdExsits",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "metaIds",
		values: [BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "mint", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "ownerOf",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "preset",
		values: [string, BigNumberish[]]
	): string;
	encodeFunctionData(functionFragment: "presets", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "renounceOwnership",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "safeTransferFrom",
		values: [string, string, BigNumberish]
	): string;
	encodeFunctionData(functionFragment: "saleStart", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "setApprovalForAll",
		values: [string, boolean]
	): string;
	encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
	encodeFunctionData(
		functionFragment: "setComponentsBaseURI",
		values: [string]
	): string;
	encodeFunctionData(functionFragment: "shape", values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: "shapeURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "supportsInterface",
		values: [BytesLike]
	): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "tokenByIndex",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "tokenOfOwnerByIndex",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "tokenPrice",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "tokenReceiver",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "tokenURI",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "totalSupply",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "transferFrom",
		values: [string, string, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "transferOwnership",
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: "transferTokenReceiver",
		values: [string]
	): string;

	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "background", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "backgroundURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "blockAttribute",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "blockAttributeURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "combatSuit", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "combatSuitURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "componentsBaseURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "customeURI", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "facialAccessories",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "facialAccessoriesURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "generateMetaId",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getApproved",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "glass", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "glassURI", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPreset", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "isApprovedForAll",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "isSaleOpen", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "levelURI", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMintx", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "metaIdExsits",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "metaIds", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "preset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "presets", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "renounceOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "safeTransferFrom",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "saleStart", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "setApprovalForAll",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "setComponentsBaseURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "shape", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "shapeURI", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "supportsInterface",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "tokenByIndex",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "tokenOfOwnerByIndex",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "tokenReceiver",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "totalSupply",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferFrom",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferTokenReceiver",
		data: BytesLike
	): Result;

	events: {
		"Approval(address,address,uint256)": EventFragment;
		"ApprovalForAll(address,address,bool)": EventFragment;
		"OwnershipTransferred(address,address)": EventFragment;
		"Transfer(address,address,uint256)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
	[string, string, BigNumber] & {
		owner: string;
		approved: string;
		tokenId: BigNumber;
	}
>;

export type ApprovalForAllEvent = TypedEvent<
	[string, string, boolean] & {
		owner: string;
		operator: string;
		approved: boolean;
	}
>;

export type OwnershipTransferredEvent = TypedEvent<
	[string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
	[string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class Arcade extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: ArcadeInterface;

	functions: {
		approve(
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		background(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		backgroundURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		baseURI(overrides?: CallOverrides): Promise<[string]>;

		blockAttribute(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		blockAttributeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		combatSuit(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		combatSuitURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		componentsBaseURI(overrides?: CallOverrides): Promise<[string]>;

		customeURI(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		facialAccessories(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		facialAccessoriesURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		generateMetaId(
			randomId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		getApproved(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		glass(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		glassURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		hasPreset(overrides?: CallOverrides): Promise<[boolean]>;

		isApprovedForAll(
			owner: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		isSaleOpen(overrides?: CallOverrides): Promise<[boolean]>;

		level(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		levelURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		maxMintx(overrides?: CallOverrides): Promise<[BigNumber]>;

		metaIdExsits(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		metaIds(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		mint(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		name(overrides?: CallOverrides): Promise<[string]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		ownerOf(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		preset(
			account: string,
			metaIds_: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		presets(overrides?: CallOverrides): Promise<[BigNumber]>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		"safeTransferFrom(address,address,uint256)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		"safeTransferFrom(address,address,uint256,bytes)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			_data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		saleStart(overrides?: CallOverrides): Promise<[BigNumber]>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setComponentsBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		shape(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		shapeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		symbol(overrides?: CallOverrides): Promise<[string]>;

		tokenByIndex(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		tokenOfOwnerByIndex(
			owner: string,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

		tokenReceiver(overrides?: CallOverrides): Promise<[string]>;

		tokenURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

		transferFrom(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		transferTokenReceiver(
			newReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;
	};

	approve(
		to: string,
		tokenId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	background(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	backgroundURI(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

	baseURI(overrides?: CallOverrides): Promise<string>;

	blockAttribute(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	blockAttributeURI(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	combatSuit(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	combatSuitURI(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	componentsBaseURI(overrides?: CallOverrides): Promise<string>;

	customeURI(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

	facialAccessories(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	facialAccessoriesURI(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	generateMetaId(
		randomId: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	getApproved(
		tokenId: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	glass(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	glassURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

	hasPreset(overrides?: CallOverrides): Promise<boolean>;

	isApprovedForAll(
		owner: string,
		operator: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	isSaleOpen(overrides?: CallOverrides): Promise<boolean>;

	level(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	levelURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

	maxMintx(overrides?: CallOverrides): Promise<BigNumber>;

	metaIdExsits(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

	metaIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	mint(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	name(overrides?: CallOverrides): Promise<string>;

	owner(overrides?: CallOverrides): Promise<string>;

	ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

	preset(
		account: string,
		metaIds_: BigNumberish[],
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	presets(overrides?: CallOverrides): Promise<BigNumber>;

	renounceOwnership(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	"safeTransferFrom(address,address,uint256)"(
		from: string,
		to: string,
		tokenId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	"safeTransferFrom(address,address,uint256,bytes)"(
		from: string,
		to: string,
		tokenId: BigNumberish,
		_data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	saleStart(overrides?: CallOverrides): Promise<BigNumber>;

	setApprovalForAll(
		operator: string,
		approved: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setBaseURI(
		uri_: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setComponentsBaseURI(
		uri_: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	shape(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	shapeURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

	supportsInterface(
		interfaceId: BytesLike,
		overrides?: CallOverrides
	): Promise<boolean>;

	symbol(overrides?: CallOverrides): Promise<string>;

	tokenByIndex(
		index: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	tokenOfOwnerByIndex(
		owner: string,
		index: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

	tokenReceiver(overrides?: CallOverrides): Promise<string>;

	tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

	totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

	transferFrom(
		from: string,
		to: string,
		tokenId: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	transferTokenReceiver(
		newReceiver: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		approve(
			to: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		background(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		backgroundURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

		baseURI(overrides?: CallOverrides): Promise<string>;

		blockAttribute(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		blockAttributeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		combatSuit(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		combatSuitURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		componentsBaseURI(overrides?: CallOverrides): Promise<string>;

		customeURI(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

		facialAccessories(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		facialAccessoriesURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		generateMetaId(
			randomId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getApproved(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		glass(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		glassURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

		hasPreset(overrides?: CallOverrides): Promise<boolean>;

		isApprovedForAll(
			owner: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		isSaleOpen(overrides?: CallOverrides): Promise<boolean>;

		level(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		levelURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

		maxMintx(overrides?: CallOverrides): Promise<BigNumber>;

		metaIdExsits(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<boolean>;

		metaIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		mint(overrides?: CallOverrides): Promise<void>;

		name(overrides?: CallOverrides): Promise<string>;

		owner(overrides?: CallOverrides): Promise<string>;

		ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

		preset(
			account: string,
			metaIds_: BigNumberish[],
			overrides?: CallOverrides
		): Promise<void>;

		presets(overrides?: CallOverrides): Promise<BigNumber>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		"safeTransferFrom(address,address,uint256)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		"safeTransferFrom(address,address,uint256,bytes)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			_data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		saleStart(overrides?: CallOverrides): Promise<BigNumber>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: CallOverrides
		): Promise<void>;

		setBaseURI(uri_: string, overrides?: CallOverrides): Promise<void>;

		setComponentsBaseURI(
			uri_: string,
			overrides?: CallOverrides
		): Promise<void>;

		shape(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		shapeURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>;

		symbol(overrides?: CallOverrides): Promise<string>;

		tokenByIndex(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		tokenOfOwnerByIndex(
			owner: string,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

		tokenReceiver(overrides?: CallOverrides): Promise<string>;

		tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		transferFrom(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		transferOwnership(
			newOwner: string,
			overrides?: CallOverrides
		): Promise<void>;

		transferTokenReceiver(
			newReceiver: string,
			overrides?: CallOverrides
		): Promise<void>;
	};

	filters: {
		"Approval(address,address,uint256)"(
			owner?: string | null,
			approved?: string | null,
			tokenId?: BigNumberish | null
		): TypedEventFilter<
			[string, string, BigNumber],
			{ owner: string; approved: string; tokenId: BigNumber }
		>;

		Approval(
			owner?: string | null,
			approved?: string | null,
			tokenId?: BigNumberish | null
		): TypedEventFilter<
			[string, string, BigNumber],
			{ owner: string; approved: string; tokenId: BigNumber }
		>;

		"ApprovalForAll(address,address,bool)"(
			owner?: string | null,
			operator?: string | null,
			approved?: null
		): TypedEventFilter<
			[string, string, boolean],
			{ owner: string; operator: string; approved: boolean }
		>;

		ApprovalForAll(
			owner?: string | null,
			operator?: string | null,
			approved?: null
		): TypedEventFilter<
			[string, string, boolean],
			{ owner: string; operator: string; approved: boolean }
		>;

		"OwnershipTransferred(address,address)"(
			previousOwner?: string | null,
			newOwner?: string | null
		): TypedEventFilter<
			[string, string],
			{ previousOwner: string; newOwner: string }
		>;

		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null
		): TypedEventFilter<
			[string, string],
			{ previousOwner: string; newOwner: string }
		>;

		"Transfer(address,address,uint256)"(
			from?: string | null,
			to?: string | null,
			tokenId?: BigNumberish | null
		): TypedEventFilter<
			[string, string, BigNumber],
			{ from: string; to: string; tokenId: BigNumber }
		>;

		Transfer(
			from?: string | null,
			to?: string | null,
			tokenId?: BigNumberish | null
		): TypedEventFilter<
			[string, string, BigNumber],
			{ from: string; to: string; tokenId: BigNumber }
		>;
	};

	estimateGas: {
		approve(
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		background(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		backgroundURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

		baseURI(overrides?: CallOverrides): Promise<BigNumber>;

		blockAttribute(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		blockAttributeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		combatSuit(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		combatSuitURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		componentsBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

		customeURI(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		facialAccessories(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		facialAccessoriesURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		generateMetaId(
			randomId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		getApproved(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		glass(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		glassURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		hasPreset(overrides?: CallOverrides): Promise<BigNumber>;

		isApprovedForAll(
			owner: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

		level(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		levelURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		maxMintx(overrides?: CallOverrides): Promise<BigNumber>;

		metaIdExsits(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		metaIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		mint(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		ownerOf(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		preset(
			account: string,
			metaIds_: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		presets(overrides?: CallOverrides): Promise<BigNumber>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		"safeTransferFrom(address,address,uint256)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		"safeTransferFrom(address,address,uint256,bytes)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			_data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		saleStart(overrides?: CallOverrides): Promise<BigNumber>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setComponentsBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		shape(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		shapeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		symbol(overrides?: CallOverrides): Promise<BigNumber>;

		tokenByIndex(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		tokenOfOwnerByIndex(
			owner: string,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

		tokenReceiver(overrides?: CallOverrides): Promise<BigNumber>;

		tokenURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		transferFrom(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		transferTokenReceiver(
			newReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		approve(
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		background(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		backgroundURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		balanceOf(
			owner: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		blockAttribute(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		blockAttributeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		combatSuit(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		combatSuitURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		componentsBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		customeURI(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		facialAccessories(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		facialAccessoriesURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		generateMetaId(
			randomId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		getApproved(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		glass(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		glassURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		hasPreset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		isApprovedForAll(
			owner: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		isSaleOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		level(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		levelURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		maxMintx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		metaIdExsits(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		metaIds(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		mint(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		ownerOf(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		preset(
			account: string,
			metaIds_: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		presets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		"safeTransferFrom(address,address,uint256)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		"safeTransferFrom(address,address,uint256,bytes)"(
			from: string,
			to: string,
			tokenId: BigNumberish,
			_data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		saleStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setComponentsBaseURI(
			uri_: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		shape(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		shapeURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenByIndex(
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		tokenOfOwnerByIndex(
			owner: string,
			index: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenURI(
			tokenId: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transferFrom(
			from: string,
			to: string,
			tokenId: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		transferTokenReceiver(
			newReceiver: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;
	};
}
